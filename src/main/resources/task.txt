При выполнении задания, структуру пиложения построил на возможное дальнейшее использование кода в других проектах или модулях.
Для этого применялся фабричный паттерн. 
Конфигурационные настройки вынесены в отдельный пакет и для доступной и гибкой замены в готовом приложении в файл config.property.
В ходе выполнения задания сложности составили в 4 пункте, так как раньше с таким не сталкивался, XSLT изучался по ходу выполнения.

Что касается работы приложения: со 100 т.записей приложение на моей машине справляется за 12-16 секунд. 
Однако чтобы протестировать на 1 млн., мне не хватает мощности, у меня слабый компьютер.

Чтобы ускорить процесс выполнения алгоритма и работы с файловой системой, вижу решение в подключении многопоточности.
Как это вижу я: в первом потоке происходит работа с базой, после того как добавиться 50-100т.записей, создаем второй поток, 
который начнет заниматься с xml, извлекает с базы 50-100т.записей и ждет следующую партию. Только думаю, 
что чтобы это получилось, в таблицу необходимо добавить столбец-идентификатор с PRIMARY KEY.
Сейчас, в виду ограниченности по времени, выкладываю данную версию приложения, без использования многопоточности, 
постараюсь реализовать задуманное на ближайшей неделе